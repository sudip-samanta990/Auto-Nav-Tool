import matplotlib.pyplot as plt

def x_minimum (b):
	min1=4000000
	for i in range(0,len(b)):
		if b[i][0]<min1:
			min1=b[i][0]
	return min1

def y_minimum (b):
    min2=40000000
    for i in range(0,len(b)):
        if b[i][1]<min2:
            min2=b[i][1]
    return min2

def x_maximum (b):
    max1=-20
    for i in range(0,len(b)):
        if b[i][0]>max1:
            max1=b[i][0]
    return max1


def y_maximum (b):
    max2=-20
    for i in range(0,len(b)):
        if b[i][1]>max2:
            max2=b[i][1]
    return max2

def check(a,x,y,w,h):
	for n in range(0,len(a)):
		
		if (abs(a[n][0]-x)>=w  and abs(a[n][1]-y)>=h) :
			return 0	
	return 1

#clustering list for creat rectangular obstacles

def classify(a,numbers,x,y,threshold,w,h):
	
	for j in range(0,len(numbers)//200):
		if len(a[j]) != 0 and len(a[j])<threshold :
			for i in range(0,len(a[j])):
				if (abs(a[j][i][0]-x)==0 or abs(a[j][i][0]-x)==1) and (abs(a[j][i][1]-y)== 1 or abs(a[j][i][1]-y)==0):
					if check(a[j],x,y,w,h)==1:
						a[j].append((x,y))
						return 0
					else:
						break
                
	for j in range(0,len(numbers)//200):
		if len(a[j])==0:
			a[j].append((x,y))
			return 0


def distinct_list(a): #counting total distinct lists
	count1 = 0
	for i in range (0,len(a)):
		if len(a[i]) != 0:
			count1=count1+1
	
	return count1	 

def plotting(A,B,b): 
	plot=[[] for x in range(distinct_list(b))]
	
	file1 = open("obstacles_lists.txt", "w")
	
	for i in range(0,distinct_list(b)):
		x_min=x_minimum(b[i])
		x_max=x_maximum(b[i])
		y_min=y_minimum(b[i])
		y_max=y_maximum(b[i])
		string=str(x_min)+","+str(x_max)+","+str(y_min)+","+str(y_max)+"\n"
		file1.write(string)
		plot[i].append(x_min)
		plot[i].append(x_min)
		plot[i].append(x_max)
		plot[i].append(x_max)
		plot[i].append(x_min)

		plot[i].append(y_min)
		plot[i].append(y_max)
		plot[i].append(y_max)
		plot[i].append(y_min)
		plot[i].append(y_min)
	file1.close()
	plt.xlim(0, A+10)
	plt.ylim(0, B+50)
	for i in range(0,distinct_list(b),1):
		plt.plot([plot[i][0],plot[i][1],plot[i][2],plot[i][3],plot[i][4]],[plot[i][5],plot[i][6],plot[i][7],plot[i][8],plot[i][9]],color='black') 
	
	#plt.plot(lists3,lists4)
	plt.xlabel("width")
	plt.ylabel("hight")
	plt.title("map graph")
	plt.grid(b=True)
	plt.show()


def map_analyzer():
	A=int(input("enter the upper bound of the x axis in the grid: "))
	B=int(input("enter the upper bound of the y axis in the grid: "))
	k=int(input("enter the total numberof partition in the grid: "))
	threshold=int(input("enter the threshold for disjoint lists: " ))
	w=int(input("enter the width of the obstacles or deviation in x-axis: " )) #total deviation in the map throughout horizontal axis
	h=int(input(" enter the width of the obstacles or deviation in y axis: " )) #total deviation in the map throughout horizontal axis
	value1=int(input(" enter the lower bound of the obstacles from the map data: " ))
	value2=int(input(" enter the upper bound of the obstacles from the map data:" ))
	
	lists=[]
	numbers=[]
	#lists2=[]
	
	f=open('1st_map.txt') # open the map file generated by cartographer   
	for line in f:
		lists.append(line.rstrip().split(","))
	for i in range(0,len(lists)):
		lists[i].pop()
	import itertools

	numbers=list(itertools.chain.from_iterable(lists))
	for i in range(0, len(numbers)): 
		numbers[i] = int(float(numbers[i]))
	#print(numbers)
	print(len(numbers)) 
	a=[[] for x in range(len(numbers)//200)] # nested lists collection of all distinct lists

	for indx,val in enumerate(numbers):
		if val >=value1 and val <=value2:
			y1=indx//k
			x1=indx%k
			classify(a,numbers,x1,y1,threshold,w,h) #classify the adjacency obstacle points
	
	print("len of distinct lists= %d"%distinct_list(a))
	
	plotting(A,B,a)

if __name__ == '__main__':
	map_analyzer()	
